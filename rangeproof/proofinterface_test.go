package rangeproof

import (
	"testing"

	"github.com/privacybydesign/gabi/big"
	"github.com/privacybydesign/gabi/internal/common"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestProofKeyproofInterfaces(t *testing.T) {
	p, ok := new(big.Int).SetString("137638811993558195206420328357073658091105450134788808980204514105755078006531089565424872264423706112211603473814961517434905870865504591672559685691792489986134468104546337570949069664216234978690144943134866212103184925841701142837749906961652202656280177667215409099503103170243548357516953064641207916007", 10)
	require.True(t, ok, "failed to parse p")
	q, ok := new(big.Int).SetString("161568850263671082708797642691138038443080533253276097248590507678645648170870472664501153166861026407778587004276645109302937591955229881186233151561419055453812743980662387119394543989953096207398047305729607795030698835363986813674377580220752360344952636913024495263497458333887018979316817606614095137583", 10)
	require.True(t, ok, "failed to parse q")

	N := new(big.Int).Mul(p, q)

	proof := proof{}
	v := common.RandomQR(N)
	proof.Cs = append(proof.Cs, v)
	v = common.RandomQR(N)
	proof.Cs = append(proof.Cs, v)
	v = common.RandomQR(N)
	proof.Cs = append(proof.Cs, v)

	v, err := common.RandomBigInt(256)
	require.NoError(t, err)
	proof.MResponse = v
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	proof.V5Response = v
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	proof.DResponses = append(proof.DResponses, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	proof.DResponses = append(proof.DResponses, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	proof.DResponses = append(proof.DResponses, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	proof.VResponses = append(proof.VResponses, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	proof.VResponses = append(proof.VResponses, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	proof.VResponses = append(proof.VResponses, v)

	assert.ElementsMatch(t, proof.Names(), []string{"C0", "C1", "C2"})
	assert.Equal(t, proof.Base("C0"), proof.Cs[0])
	assert.Equal(t, proof.Base("C1"), proof.Cs[1])
	assert.Equal(t, proof.Base("C2"), proof.Cs[2])
	assert.Equal(t, proof.Base("C-1"), (*big.Int)(nil))
	assert.Equal(t, proof.Base("C3"), (*big.Int)(nil))
	assert.Equal(t, proof.Base("Cabcd"), (*big.Int)(nil))
	assert.Equal(t, proof.Base("djfdf"), (*big.Int)(nil))

	ret := new(big.Int)
	assert.True(t, proof.Exp(ret, "C0", big.NewInt(15), N))
	assert.Equal(t, ret, new(big.Int).Exp(proof.Base("C0"), big.NewInt(15), N))
	assert.True(t, proof.Exp(ret, "C1", big.NewInt(17), N))
	assert.Equal(t, ret, new(big.Int).Exp(proof.Base("C1"), big.NewInt(17), N))
	assert.True(t, proof.Exp(ret, "C2", big.NewInt(19), N))
	assert.Equal(t, ret, new(big.Int).Exp(proof.Base("C2"), big.NewInt(19), N))
	assert.False(t, proof.Exp(ret, "C3", big.NewInt(21), N))
	assert.False(t, proof.Exp(ret, "C-1", big.NewInt(23), N))
	assert.False(t, proof.Exp(ret, "Cadfsdf", big.NewInt(25), N))
	assert.False(t, proof.Exp(ret, "jdsdfj", big.NewInt(27), N))

	assert.Equal(t, proof.ProofResult("v0"), proof.VResponses[0])
	assert.Equal(t, proof.ProofResult("v1"), proof.VResponses[1])
	assert.Equal(t, proof.ProofResult("v2"), proof.VResponses[2])
	assert.Equal(t, proof.ProofResult("v-1"), (*big.Int)(nil))
	assert.Equal(t, proof.ProofResult("v3"), (*big.Int)(nil))
	assert.Equal(t, proof.ProofResult("vajdfsk"), (*big.Int)(nil))
	assert.Equal(t, proof.ProofResult("d0"), proof.DResponses[0])
	assert.Equal(t, proof.ProofResult("d1"), proof.DResponses[1])
	assert.Equal(t, proof.ProofResult("d2"), proof.DResponses[2])
	assert.Equal(t, proof.ProofResult("d-1"), (*big.Int)(nil))
	assert.Equal(t, proof.ProofResult("d3"), (*big.Int)(nil))
	assert.Equal(t, proof.ProofResult("dalsdf"), (*big.Int)(nil))
	assert.Equal(t, proof.ProofResult("m"), proof.MResponse)
	assert.Equal(t, proof.ProofResult("msdfjk"), (*big.Int)(nil))
	assert.Equal(t, proof.ProofResult("sjfd"), (*big.Int)(nil))

}

func TestCommitKeyproofInterfaces(t *testing.T) {
	p, ok := new(big.Int).SetString("137638811993558195206420328357073658091105450134788808980204514105755078006531089565424872264423706112211603473814961517434905870865504591672559685691792489986134468104546337570949069664216234978690144943134866212103184925841701142837749906961652202656280177667215409099503103170243548357516953064641207916007", 10)
	require.True(t, ok, "failed to parse p")
	q, ok := new(big.Int).SetString("161568850263671082708797642691138038443080533253276097248590507678645648170870472664501153166861026407778587004276645109302937591955229881186233151561419055453812743980662387119394543989953096207398047305729607795030698835363986813674377580220752360344952636913024495263497458333887018979316817606614095137583", 10)
	require.True(t, ok, "failed to parse q")

	N := new(big.Int).Mul(p, q)

	commit := proofCommit{}

	v := common.RandomQR(N)
	commit.c = append(commit.c, v)
	v = common.RandomQR(N)
	commit.c = append(commit.c, v)
	v = common.RandomQR(N)
	commit.c = append(commit.c, v)

	var err error
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.m = v
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.mRandomizer = v
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.v5 = v
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.v5Randomizer = v
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.d = append(commit.d, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.d = append(commit.d, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.d = append(commit.d, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.dRandomizers = append(commit.dRandomizers, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.dRandomizers = append(commit.dRandomizers, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.dRandomizers = append(commit.dRandomizers, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.v = append(commit.v, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.v = append(commit.v, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.v = append(commit.v, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.vRandomizers = append(commit.vRandomizers, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.vRandomizers = append(commit.vRandomizers, v)
	v, err = common.RandomBigInt(256)
	require.NoError(t, err)
	commit.vRandomizers = append(commit.vRandomizers, v)

	assert.ElementsMatch(t, commit.Names(), []string{"C0", "C1", "C2"})
	assert.Equal(t, commit.Base("C0"), commit.c[0])
	assert.Equal(t, commit.Base("C1"), commit.c[1])
	assert.Equal(t, commit.Base("C2"), commit.c[2])
	assert.Equal(t, commit.Base("C3"), (*big.Int)(nil))
	assert.Equal(t, commit.Base("C-1"), (*big.Int)(nil))
	assert.Equal(t, commit.Base("Cadfsdf"), (*big.Int)(nil))
	assert.Equal(t, commit.Base("jdsdfj"), (*big.Int)(nil))

	ret := new(big.Int)
	assert.True(t, commit.Exp(ret, "C0", big.NewInt(15), N))
	assert.Equal(t, ret, new(big.Int).Exp(commit.Base("C0"), big.NewInt(15), N))
	assert.True(t, commit.Exp(ret, "C1", big.NewInt(17), N))
	assert.Equal(t, ret, new(big.Int).Exp(commit.Base("C1"), big.NewInt(17), N))
	assert.True(t, commit.Exp(ret, "C2", big.NewInt(19), N))
	assert.Equal(t, ret, new(big.Int).Exp(commit.Base("C2"), big.NewInt(19), N))
	assert.False(t, commit.Exp(ret, "C3", big.NewInt(21), N))
	assert.False(t, commit.Exp(ret, "C-1", big.NewInt(23), N))
	assert.False(t, commit.Exp(ret, "Cadfsdf", big.NewInt(25), N))
	assert.False(t, commit.Exp(ret, "jdsdfj", big.NewInt(27), N))

	assert.Equal(t, commit.Secret("v5"), commit.v5)
	assert.Equal(t, commit.Secret("v0"), commit.v[0])
	assert.Equal(t, commit.Secret("v1"), commit.v[1])
	assert.Equal(t, commit.Secret("v2"), commit.v[2])
	assert.Equal(t, commit.Secret("v3"), (*big.Int)(nil))
	assert.Equal(t, commit.Secret("v-1"), (*big.Int)(nil))
	assert.Equal(t, commit.Secret("vasjdfl"), (*big.Int)(nil))
	assert.Equal(t, commit.Secret("d0"), commit.d[0])
	assert.Equal(t, commit.Secret("d1"), commit.d[1])
	assert.Equal(t, commit.Secret("d2"), commit.d[2])
	assert.Equal(t, commit.Secret("d-1"), (*big.Int)(nil))
	assert.Equal(t, commit.Secret("d3"), (*big.Int)(nil))
	assert.Equal(t, commit.Secret("dasdlkfj"), (*big.Int)(nil))
	assert.Equal(t, commit.Secret("m"), commit.m)
	assert.Equal(t, commit.Secret("malsd"), (*big.Int)(nil))
	assert.Equal(t, commit.Secret("alsdkjf"), (*big.Int)(nil))

	assert.Equal(t, commit.Randomizer("v5"), commit.v5Randomizer)
	assert.Equal(t, commit.Randomizer("v0"), commit.vRandomizers[0])
	assert.Equal(t, commit.Randomizer("v1"), commit.vRandomizers[1])
	assert.Equal(t, commit.Randomizer("v2"), commit.vRandomizers[2])
	assert.Equal(t, commit.Randomizer("v3"), (*big.Int)(nil))
	assert.Equal(t, commit.Randomizer("v-1"), (*big.Int)(nil))
	assert.Equal(t, commit.Randomizer("vasjdfl"), (*big.Int)(nil))
	assert.Equal(t, commit.Randomizer("d0"), commit.dRandomizers[0])
	assert.Equal(t, commit.Randomizer("d1"), commit.dRandomizers[1])
	assert.Equal(t, commit.Randomizer("d2"), commit.dRandomizers[2])
	assert.Equal(t, commit.Randomizer("d-1"), (*big.Int)(nil))
	assert.Equal(t, commit.Randomizer("d3"), (*big.Int)(nil))
	assert.Equal(t, commit.Randomizer("dasdlkfj"), (*big.Int)(nil))
	assert.Equal(t, commit.Randomizer("m"), commit.mRandomizer)
	assert.Equal(t, commit.Randomizer("malsd"), (*big.Int)(nil))
	assert.Equal(t, commit.Randomizer("alsdkjf"), (*big.Int)(nil))
}
